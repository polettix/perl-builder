#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long qw< :config gnu_getopt >;
use English qw< -no_match_vars >;
use Cwd qw< abs_path getcwd >;
use File::Spec::Functions
  qw< splitpath splitdir catdir catpath rel2abs file_name_is_absolute >;
use File::Path qw< mkpath rmtree >;
use File::Copy qw< copy >;
my $VERSION = '0.0.1';

my %config = ();
GetOptions(
   \%config,
   qw<
     usage! help! man! version!
     >
) or pod2usage(-verbose => 99, -sections => 'USAGE');
pod2usage(message => "$0 $VERSION", -verbose => 99, -sections => ' ')
  if $config{version};
pod2usage(-verbose => 99, -sections => 'USAGE') if $config{usage};
pod2usage(-verbose => 99, -sections => 'USAGE|EXAMPLES|OPTIONS')
  if $config{help};
pod2usage(-verbose => 2) if $config{man};

# Script implementation here
sub absolute {
   my ($path) = @_;
   return $path if file_name_is_absolute($path);
   return rel2abs($path);
}

sub parent {
   my ($file) = @_;
   my ($v, $d, $n) = splitpath($file);
   if (!length $n) {
      my @d = splitdir($d);
      1 while !length(pop @d);
      $d = catdir(@d);
   }
   return catpath($v, $d, '');
} ## end sub parent

sub child {
   my ($dir, @subpath) = @_;
   my $filename = pop @subpath;
   my ($v, $d) = splitpath($dir, 1);
   $d = catdir(splitdir($d), @subpath) if @subpath;
   return catpath($v, $d, $filename);
} ## end sub child

# some useful paths
my $ME      = absolute(__FILE__);
my $MYDIR   = parent($ME);
my $BASEDIR = absolute($ENV{OLD_PWD});

my $pack = get_package();
my $target = resolve_target($ARGV[0] || $pack->{name});
compile_and_install($pack, $target);

sub compile_and_install {
   my ($pack, $target) = @_;
   my $start = getcwd();

   my $build = child($start, 'build');
   mkdir $build or die "mkdir(): $OS_ERROR\n";
   mysystem(qw< tar xvC build -f >, $pack->{path});

   {
      ccd(child($build, $pack->{name}));
      mysystem(
         qw<
           sh Configure
           -des
           -Duserelocatableinc
           -Dman1dir=none
           -Dman3dir=none
           >,
         "-Dprefix=$target"
      );
      mysystem('make');
      mysystem(qw< make install >);
      ccd($start);
   }

   my $site_perl = child($target, qw< lib site_perl >);
   rmtree($site_perl);
   open my $fh, '>', $site_perl or die "open('$site_perl'): $OS_ERROR\n";
   close $fh or die "close() on '$site_perl': $OS_ERROR\n";

   my @ancillaries = split /\n/, slurp_raw('ancillaries.txt');
   for my $ancillary (@ancillaries, 'relocate') {
      my $target_ancillary = child($target, 'bin', $ancillary);
      copy($ancillary, $target_ancillary);
      chmod 0755, $target_ancillary;
      relocate_script($target_ancillary, child($target, qw< bin perl >));
   }
} ## end sub compile_and_install

sub slurp_raw {
   my ($filename) = @_;
   open my $fh, '<:raw', $filename or die "open('$filename'): $OS_ERROR\n";
   local $/;
   return <$fh>;
}

sub relocate_script {
   my ($file, $perl) = @_;
   my $contents = slurp_raw($file);
   open my $fh, '>:raw', $file or die "open('$file'): $OS_ERROR\n";
   print {$fh} <<"END_OF_PREAMBLE" or die "print(): $OS_ERROR\n";
#!$perl
   eval 'exec $perl -S \$0 \${1+"\$@"}'
      if \$running_under_some_shell;
END_OF_PREAMBLE
   print {$fh} $contents or die "print(): $OS_ERROR\n";
   close $fh or die "close(): $OS_ERROR\n";
   return;
} ## end sub relocate_script

sub dolog {
   print {*STDERR} @_;
}

sub INFO { return dolog(' INFO: ', @_); }
sub WARN { return dolog(' WARN: ', @_); }

sub LOGDIE {
   dolog('FATAL: ', @_);
   die "\n";
}

sub mysystem {
   my @command = @_;
   INFO "calling @command";
   my $retval = system {$command[0]} @command;
   LOGDIE "exited with error $retval: @command"
     if $retval;
   return;
} ## end sub mysystem

sub get_package {
   opendir my $dh, $MYDIR or die "opendir('$MYDIR'): $OS_ERROR\n";
   for my $name (readdir $dh) {
      my $item = child($MYDIR, $name);
      my ($packname, $version) =
        $name =~ m{\A (perl- ([\d.]+)) \.tar\.(?: gz | bz2 ) \z}mxs
        or next;
      return {
         path    => $item,
         name    => $packname,
         version => $version,
      };
   } ## end while (my $item = $it->)
   LOGDIE "cannot find a suitable perl package in $MYDIR";
   return;    # unreached
} ## end sub get_package

sub resolve_target {
   my ($target) = @_;

   {
      my $start = getcwd();
      ccd($BASEDIR);
      $target = absolute($target);
      ccd($start);
   }

   if (-e $target) {
      WARN "target $target already exists";
   }
   else {
      mkpath($target);    # will complain on errors
   }
   return $target;
} ## end sub resolve_target

sub ccd {
   chdir $_[0] or die "chdir(): $OS_ERROR";
}

__END__

=pod

=encoding utf-8

=head1 NAME

installer - embedded script for doing the installation

=head1 USAGE

   shell$ installer

=cut

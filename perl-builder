#!/usr/bin/env perl
use strict;
use warnings;
use Carp;
use Pod::Usage qw< pod2usage >;
use Getopt::Long qw< :config gnu_getopt >;
use English qw< -no_match_vars >;
my $VERSION = '0.0.1';
use 5.012;

use Log::Log4perl::Tiny qw< :easy :no_extra_logdie_message >;
Log::Log4perl->easy_init({level => $INFO, layout => '[%d %-5p] %m%n'});
use WWW::Mechanize;
use LWP::UserAgent;
use HTTP::Request::Common;
use URI;
use File::Temp qw< tempdir >;
use File::chdir;
use Path::Tiny qw< path cwd >;
use Cwd qw< abs_path >;

my %config = (
   cpanm => 'http://cpanmin.us/',
   mirror => 'http://www.cpan.org/',
   path   => '/src/5.0/',
   myself => path(abs_path(__FILE__)),
);
GetOptions(
   \%config,
   qw<
     usage! help! man! version!
     cpanm=s
     mirror|m=s
     output|o=s
     path|p=s
     >
) or pod2usage(-verbose => 99, -sections => 'USAGE');
pod2usage(message => "$0 $VERSION", -verbose => 99, -sections => ' ')
  if $config{version};
pod2usage(-verbose => 99, -sections => 'USAGE') if $config{usage};
pod2usage(-verbose => 99, -sections => 'USAGE|EXAMPLES|OPTIONS')
  if $config{help};
pod2usage(-verbose => 2) if $config{man};

# Script implementation here
my $wanted = shift;
pod2usage(
   message   => "please provide a perl version",
   -verbose  => 99,
   -sections => 'USAGE'
) unless defined($wanted) && length($wanted);

$config{source} = get_uri_for($wanted);
INFO $config{source};
prepare_package(\%config);

sub prepare_package {
   my ($c) = @_;

   my $source = $c->{source};
   my $output;
   if (exists $c->{output}) {
      $output = $c->{output};
   }
   else {
      my ($version) = $source =~ m{perl-([\d.]+)\.tar\.(?:bz2|gz)\z}mxs;
      $output = "perl-builder-$version.pl";
   }
   $output = path($output)->absolute();

   my $tempdir = tempdir(CLEANUP => 1);
   local $CWD = $tempdir;

   my $filename = fetch_archive($c->{source});

   fetch_cpanm($c);

   my $myself = $c->{myself};
   my $deployable = $myself->sibling('deployable');
   $deployable->copy('deployable');

   my @companions = qw< cpanm deployable regenerate relocate installer >;
   for my $name (@companions) {
      my $target = cwd->child($name);
      $myself->sibling($name)->copy($target)
         unless $target->exists();
      $target->chmod('a=rx,u+w');
   }

   INFO "saving builder to $output";
   my $regenerate = cwd()->child('regenerate')->absolute();
   my @command = ($regenerate, $output);
   system {$command[0]} @command;
}

sub fetch_archive {
   my ($source) = @_;
   (my $filename = $source->path()) =~ s{.*/}{}mxs;
   INFO "downloading $source to $filename";
   my $ua = LWP::UserAgent->new();
   $ua->default_header('Accept-Encoding' => '');
   my $response = $ua->get($source, ':content_file' => $filename);
   die "errors getting $source: ", $response->status_line()
      unless $response->is_success();
   return $filename;
}

sub fetch_cpanm {
   my ($c) = @_;

   my $source = $c->{cpanm};
   my $fallback = $c->{myself}->sibling('cpanm');
   $source = $fallback if $source eq 'local';
   INFO "getting cpanm from $source";

   my $uri = URI->new($source);
   if ($uri->has_recognized_scheme()) {
      eval {
         my $ua = WWW::Mechanize->new(timeout => 10, autocheck => 1);
         $ua->get($uri);
         open my $fh, '>:raw', 'cpanm' or die "open('cpanm'): $OS_ERROR\n";
         print {$fh} $ua->content(charset => 'none')
            or die "print() to 'cpanm': $OS_ERROR\n";
         close $fh or die "close() on 'cpanm': $OS_ERROR\n";
         INFO "success";
         1;
      } and return;
      ERROR $EVAL_ERROR if $EVAL_ERROR;
   }
   else {
      INFO "not a recognized scheme, assuming it's a local path";
      {
         local $CWD = $c->{myself}->parent()->stringify();
         $source = path($source)->absolute();
      }
      if ($source->is_file() && -r $source) {
         $source->copy('cpanm');
         return;
      }
   }

   # fetching was not successful
   INFO "errors fetching from $source, fallback to $fallback";
   $fallback->copy('cpanm');
   return;
}

sub get_uri_for {
   my ($wanted) = @_;

   # maybe a straight URI?
   my $uri = URI->new($wanted);
   return $uri if $uri->has_recognized_scheme();

   # maybe a file?
   if (-r $wanted) {
      require URI::file;
      return URI::file->new_abs($wanted);
   }

   # package name or version?
   if (my ($wanted_version) = $wanted =~ m{\A (?:perl-)? ([\d.]+) \z}mxs) {
      my $ua = WWW::Mechanize->new(autocheck => 1);
      my $dir = URI->new($config{mirror});
      $dir->path($config{path});

      $ua->get($dir);
      my $selector = qr{(?mxs: /perl- ([\d.]+) \.tar\. (bz2 | gz) \z )};
      my %candidate_for;
      for my $link ($ua->find_all_links(url_abs_regex => $selector)) {
         my $uri = $link->url_abs();
         my ($version, $format) = $uri =~ m{$selector};
         next unless $version eq $wanted_version;
         $candidate_for{$format} = $uri;
      } ## end for my $link ($ua->find_all_links...)

      my $selection;
      for my $format (qw< bz2 gz >) {
         next unless exists $candidate_for{$format};
         $selection = $candidate_for{$format};
         last;
      }

      LOGDIE "no candidate found for $wanted"
         unless defined $selection;
      return URI->new($selection);
   }

   # dunno what to do here...
   LOGDIE "unrecognized '$wanted'";
} ## end sub get_uri_for

__END__

=head1 NAME

perl-builder - create a perl-building Perl program

=head1 VERSION

Ask the version number to the script itself, calling:

   shell$ perl-builder --version


=head1 USAGE

   perl-builder [--usage] [--help] [--man] [--version]

   perl-builder locator
                [--cpanm cpanm-locator]
                [--mirror|-m URI]
                [--output|-o path]
                [--path|-p path]

=head1 EXAMPLES

   # generate perl-builder-5.20.2.pl
   shell$ perl-builder 5.20.2

   # use a local archive to do the same
   shell$ perl-builder ./perl-5.20.2.tar.bz2

   # set output file name for a builder of version 5.18.1
   shell$ perl-builder -o build-it.pl 5.18.1

   # use locally cached version of cpanm
   shell$ perl-builder --cpanm local 5.16.1

=head1 DESCRIPTION

C<perl-builder> is a program that allows you to create installers for
specific versions of Perl. These installers are Perl programs themselves,
and you will need nothing more than some previous perl installation to
build the whole thing.

For example, suppose that you want to streamline the installation of
release 5.20.2; you can generate the installer:

   # generate perl-builder-5.20.2.pl
   shell$ perl-builder 5.20.2

and then move C<perl-builder-5.20.2.pl> where you actually want to do
the installation.

In the plethora of perl-installing facilities, C<perl-builder> takes a
somehow I<inside-out> approach, where you generate a script that installs
a specific version of Perl, as opposed to having a script (e.g.
perlbrew or perl-build) that is capable, alone, of installing many
different perls.

The installation process is somehow I<opinionated>, subject to change
in the future (most probably by adding options):

=over

=item B<< relocatable >>

C<perl-builder> tries hard to make your perl relocatable. Compilation
is done using C<-Duserelocatableinc>, and a C<relocate> script is also
included to help you mangle the start of the scripts and the different
C<Config*> files with embedded paths.

=item B<< undocumented >>

or so. Manual pages are not installed for reduced space disk, you can
always use C<perldoc> anyway.

=item B<< non-expandable >>

or better it helps you to avoid installing things in C<site_perl> by
removing it and placing an empty regular file instead (so that
installing there will always produce an error). Why? This helps to
remember to have a separate I<private> installation of modules for
each project, although you can always revert this change back by
re-creating the directory.

=item B<< cpanm-provided >>

a copy of C<cpanm> (L<http://cpanmin.us>) is installed by default
for ease of installation of modules. You will probably have to
resort to the C<-L> options of C<cpanm> to install modules locally
to a project.

=back

Why the features (or lack thereof) above? When I need to install Perl
in some machine, I know that I will probably be cut out of the Internet
(hence the self-installer comes handy) and that I want to keep my
new Perl as I<original> as possible, forcing me to install modules
needed for a project in a per-project tree. For doing this, C<cpanm>
is very useful. I usually don't need the man pages (C<perldoc> FTW!)
and I might need to move the installed perl to some other location
later.

=head1 OPTIONS

The only mandatory option is provided directly without an option name. It
consists in a I<locator> for the perl to be installed:

=over

=item *

a simple version number, e.g. C<5.16.1>

=item *

a perl package name, e.g. C<perl-5.20.2>

=item *

a URI where the specific perl can be downloaded from

=item *

a file path in the local filesystem

=back

Depending on the value of the locator, the corresponding tarball will
be copied/downloaded for generating the self-installing executable.

All other options are optionals and come with a name:

=over

=item --cpanm cpanm-locator

set the place where C<cpanm> will be taken. You can pass different values:

=over

=item *

the string C<local>, in which case a locally cached version will be used

=item *

a URI for downloading

=item *

a path in the filesystem

=back

By default, it will try to download from C<http://cpanmin.us/>. In case
of failure, C<perl-builder> will fallback on the locally cached copy.

=item --help

print a somewhat more verbose help, showing usage, this description of
the options and some examples from the synopsis.

=item --man

print out the full documentation for the script.

=item --mirror|-m URI

set the mirror to use for fetching the list of available packages and
download the relevant tarball. Ignored unless the script has to find
a tarball position. Defaults to L<http://www.cpan.org/>.

=item --output|-o path

set the output path for the builder program. By default, the builder is
saved in the current directory with name C<perl-builder-X.Y.Z.pl>, where
C<X.Y.Z> is the perl version.

=item --path|-p path

set the path where differnt perls are stored in the mirror. Defaults
to C</src/5.0/>.

=item --usage

print a concise usage line and exit.

=item --version

print the version of the script.

=back

=head1 CONFIGURATION AND ENVIRONMENT

perl-builder requires no configuration files or environment variables.


=head1 DEPENDENCIES

Quite a few:

=over

=item C<Log::Log4perl::Tiny>

=item C<WWW::Mechanize>

=item C<File::chdir>

=item C<Path::Tiny>

=back

and what they imply.

=head1 BUGS AND LIMITATIONS

No bugs have been reported.

Please report any bugs or feature requests through GitHub
(L<https://github.com/polettix/perl-builder>).


=head1 AUTHOR

Flavio Poletti C<polettix@cpan.org>


=head1 LICENSE AND COPYRIGHT

Copyright (c) 2015, Flavio Poletti C<polettix@cpan.org>.

This module is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0. Please read
the full license in the F<LICENSE> file inside the distribution,
as you can find at L<https://github.com/polettix/perl-builder>.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
